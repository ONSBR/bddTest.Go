// CAUTION: Generated file - DO NOT EDIT.

//TODO Put your favorite license here

// yacc source generated by ebnf2y[1]
// at 2016-04-28 11:32:14.164479108 -0300 BRT
//
//  $ ebnf2y -pkg lexer -start Test_Scenario bddLang.ebnf
//
// CAUTION: If this file is a Go source file (*.go), it was generated
// automatically by '$ go tool yacc' from a *.y file - DO NOT EDIT in that case!
//
//   [1]: http://github.com/cznic/ebnf2y

package lexer

import __yyfmt__ "fmt"

//TODO real package name

//TODO required only be the demo _dump function
import (
	"bytes"
	//"fmt"
	"github.com/ONSBR/bddTest.Go/util"
	"strconv"
)

var log = util.GetLogger("lexer.lexer")

type Test_ScenarioSymType struct {
	yys  int
	item interface{} //TODO insert real field(s)
}

type Test_ScenarioXError struct {
	state, xsym int
}

const (
	Test_ScenarioDefault = 57354
	Test_ScenarioEofCode = 57344
	ACTION               = 57346
	LABEL                = 57347
	NEW_LINE             = 57348
	NUMBER               = 57349
	OBJECT_TYPE          = 57350
	SIGN                 = 57351
	TEXT                 = 57352
	TEXT_PARAM           = 57353
	Test_ScenarioErrCode = 57345

	Test_ScenarioMaxDepth = 200
	Test_ScenarioTabOfs   = -24
)

var (
	Test_ScenarioXLAT = map[int]int{
		57344: 0,  // $end (18x)
		57347: 1,  // LABEL (17x)
		57348: 2,  // NEW_LINE (17x)
		57352: 3,  // TEXT (11x)
		57349: 4,  // NUMBER (7x)
		57351: 5,  // SIGN (4x)
		57353: 6,  // TEXT_PARAM (4x)
		57346: 7,  // ACTION (3x)
		57350: 8,  // OBJECT_TYPE (3x)
		57355: 9,  // Assertion (2x)
		57368: 10, // Test_line (2x)
		46:    11, // '.' (1x)
		57356: 12, // Assertion1 (1x)
		57357: 13, // Assertion2 (1x)
		57358: 14, // Assertion3 (1x)
		57359: 15, // Assertion4 (1x)
		57360: 16, // Number_param (1x)
		57361: 17, // Number_param1 (1x)
		57362: 18, // Number_param2 (1x)
		57363: 19, // Object (1x)
		57364: 20, // Param (1x)
		57365: 21, // Start (1x)
		57366: 22, // Test_Scenario (1x)
		57367: 23, // Test_Scenario1 (1x)
		57354: 24, // $default (0x)
		57345: 25, // error (0x)
	}

	Test_ScenarioSymNames = []string{
		"$end",
		"LABEL",
		"NEW_LINE",
		"TEXT",
		"NUMBER",
		"SIGN",
		"TEXT_PARAM",
		"ACTION",
		"OBJECT_TYPE",
		"Assertion",
		"Test_line",
		"'.'",
		"Assertion1",
		"Assertion2",
		"Assertion3",
		"Assertion4",
		"Number_param",
		"Number_param1",
		"Number_param2",
		"Object",
		"Param",
		"Start",
		"Test_Scenario",
		"Test_Scenario1",
		"$default",
		"error",
	}

	Test_ScenarioTokenLiteralStrings = map[int]string{}

	Test_ScenarioReductions = map[int]struct{ xsym, components int }{
		0:  {0, 1},
		1:  {9, 7},
		2:  {12, 0},
		3:  {12, 2},
		4:  {13, 0},
		5:  {13, 2},
		6:  {14, 0},
		7:  {14, 2},
		8:  {15, 0},
		9:  {15, 1},
		10: {16, 3},
		11: {17, 0},
		12: {17, 1},
		13: {18, 0},
		14: {18, 2},
		15: {19, 2},
		16: {20, 1},
		17: {20, 1},
		18: {21, 1},
		19: {22, 2},
		20: {23, 0},
		21: {23, 2},
		22: {10, 1},
		23: {10, 1},
	}

	Test_ScenarioXErrors = map[Test_ScenarioXError]string{}

	Test_ScenarioParseTab = [29][]uint8{
		// 0
		{1: 26, 29, 9: 30, 28, 21: 25, 27},
		{24},
		{3: 22, 7: 22, 12: 33},
		{6},
		{4, 4, 4, 23: 31},
		// 5
		{2, 2, 2},
		{1, 1, 1},
		{5, 26, 29, 9: 30, 32},
		{3, 3, 3},
		{3: 35, 7: 34},
		// 10
		{3: 20, 8: 20, 13: 36},
		{3: 21, 7: 21},
		{3: 38, 8: 39, 19: 37},
		{18, 18, 18, 18, 18, 18, 18, 14: 41},
		{3: 19, 8: 19},
		// 15
		{3: 40},
		{9, 9, 9, 9, 9, 9, 9},
		{16, 16, 16, 43, 13, 46, 47, 15: 42, 48, 45, 20: 44},
		{23, 23, 23},
		{17, 17, 17, 17, 17, 17, 17},
		// 20
		{15, 15, 15},
		{4: 49},
		{4: 12},
		{8, 8, 8},
		{7, 7, 7},
		// 25
		{11, 11, 11, 11: 51, 18: 50},
		{14, 14, 14},
		{4: 52},
		{10, 10, 10},
	}
)

var Test_ScenarioDebug = 0

type Test_ScenarioLexer interface {
	Lex(lval *Test_ScenarioSymType) int
	Error(s string)
}

type Test_ScenarioLexerEx interface {
	Test_ScenarioLexer
	Reduced(rule, state int, lval *Test_ScenarioSymType) bool
}

func Test_ScenarioSymName(c int) (s string) {
	x, ok := Test_ScenarioXLAT[c]
	if ok {
		return Test_ScenarioSymNames[x]
	}

	if c < 0x7f {
		return __yyfmt__.Sprintf("'%c'", c)
	}

	return __yyfmt__.Sprintf("%d", c)
}

func Test_Scenariolex1(yylex Test_ScenarioLexer, lval *Test_ScenarioSymType) (n int) {
	n = yylex.Lex(lval)
	if n <= 0 {
		n = Test_ScenarioEofCode
	}
	if Test_ScenarioDebug >= 3 {
		__yyfmt__.Printf("\nlex %s(%#x %d), lval: %+v\n", Test_ScenarioSymName(n), n, n, lval)
	}
	return n
}

func Test_ScenarioParse(yylex Test_ScenarioLexer) int {
	const yyError = 25

	yyEx, _ := yylex.(Test_ScenarioLexerEx)
	var yyn int
	var yylval Test_ScenarioSymType
	var yyVAL Test_ScenarioSymType
	yyS := make([]Test_ScenarioSymType, 200)

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yyerrok := func() {
		if Test_ScenarioDebug >= 2 {
			__yyfmt__.Printf("yyerrok()\n")
		}
		Errflag = 0
	}
	_ = yyerrok
	yystate := 0
	yychar := -1
	var yyxchar int
	var yyshift int
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	yyp++
	if yyp >= len(yyS) {
		nyys := make([]Test_ScenarioSymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	if yychar < 0 {
		yychar = Test_Scenariolex1(yylex, &yylval)
		var ok bool
		if yyxchar, ok = Test_ScenarioXLAT[yychar]; !ok {
			yyxchar = len(Test_ScenarioSymNames) // > tab width
		}
	}
	if Test_ScenarioDebug >= 4 {
		var a []int
		for _, v := range yyS[:yyp+1] {
			a = append(a, v.yys)
		}
		__yyfmt__.Printf("state stack %v\n", a)
	}
	row := Test_ScenarioParseTab[yystate]
	yyn = 0
	if yyxchar < len(row) {
		if yyn = int(row[yyxchar]); yyn != 0 {
			yyn += Test_ScenarioTabOfs
		}
	}
	switch {
	case yyn > 0: // shift
		yychar = -1
		yyVAL = yylval
		yystate = yyn
		yyshift = yyn
		if Test_ScenarioDebug >= 2 {
			__yyfmt__.Printf("shift, and goto state %d\n", yystate)
		}
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	case yyn < 0: // reduce
	case yystate == 1: // accept
		if Test_ScenarioDebug >= 2 {
			__yyfmt__.Println("accept")
		}
		goto ret0
	}

	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			if Test_ScenarioDebug >= 1 {
				__yyfmt__.Printf("no action for %s in state %d\n", Test_ScenarioSymName(yychar), yystate)
			}
			msg, ok := Test_ScenarioXErrors[Test_ScenarioXError{yystate, yyxchar}]
			if !ok {
				msg, ok = Test_ScenarioXErrors[Test_ScenarioXError{yystate, -1}]
			}
			if !ok && yyshift != 0 {
				msg, ok = Test_ScenarioXErrors[Test_ScenarioXError{yyshift, yyxchar}]
			}
			if !ok {
				msg, ok = Test_ScenarioXErrors[Test_ScenarioXError{yyshift, -1}]
			}
			if yychar > 0 {
				ls := Test_ScenarioTokenLiteralStrings[yychar]
				if ls == "" {
					ls = Test_ScenarioSymName(yychar)
				}
				if ls != "" {
					switch {
					case msg == "":
						msg = __yyfmt__.Sprintf("unexpected %s", ls)
					default:
						msg = __yyfmt__.Sprintf("unexpected %s, %s", ls, msg)
					}
				}
			}
			if msg == "" {
				msg = "syntax error"
			}
			yylex.Error(msg)
			Nerrs++
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				row := Test_ScenarioParseTab[yyS[yyp].yys]
				if yyError < len(row) {
					yyn = int(row[yyError]) + Test_ScenarioTabOfs
					if yyn > 0 { // hit
						if Test_ScenarioDebug >= 2 {
							__yyfmt__.Printf("error recovery found error shift in state %d\n", yyS[yyp].yys)
						}
						yystate = yyn /* simulate a shift of "error" */
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if Test_ScenarioDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			if Test_ScenarioDebug >= 2 {
				__yyfmt__.Printf("error recovery failed\n")
			}
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if Test_ScenarioDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", Test_ScenarioSymName(yychar))
			}
			if yychar == Test_ScenarioEofCode {
				goto ret1
			}

			yychar = -1
			goto yynewstate /* try again in the same state */
		}
	}

	r := -yyn
	x0 := Test_ScenarioReductions[r]
	x, n := x0.xsym, x0.components
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= n
	if yyp+1 >= len(yyS) {
		nyys := make([]Test_ScenarioSymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	exState := yystate
	yystate = int(Test_ScenarioParseTab[yyS[yyp].yys][x]) + Test_ScenarioTabOfs
	/* reduction by production r */
	if Test_ScenarioDebug >= 2 {
		__yyfmt__.Printf("reduce using rule %v (%s), and goto state %d\n", r, Test_ScenarioSymNames[x], yystate)
	}

	switch r {
	case 1:
		{
			log.Infof("Assertion found!")
			var buffer bytes.Buffer
			buffer.WriteString(yyS[yypt-6].item.(string))
			buffer.WriteString(" ")
			buffer.WriteString(yyS[yypt-5].item.(string))
			buffer.WriteString(" ")
			buffer.WriteString(yyS[yypt-4].item.(string))
			buffer.WriteString(" ")
			buffer.WriteString(yyS[yypt-3].item.(string))
			buffer.WriteString(" ")
			buffer.WriteString(yyS[yypt-2].item.(Object).ObjectType)
			buffer.WriteString(" ")
			buffer.WriteString(yyS[yypt-2].item.(Object).ObjectId)
			buffer.WriteString(" ")
			buffer.WriteString(yyS[yypt-1].item.(string))
			buffer.WriteString(" ")
			buffer.WriteString(yyS[yypt-0].item.(string))
			yyVAL.item = Assertion{FullText: buffer.String(), Label: yyS[yypt-6].item.(string), Action: yyS[yypt-4].item.(string), ObjectType: yyS[yypt-2].item.(Object).ObjectType, ObjectId: yyS[yypt-2].item.(Object).ObjectId, Param: yyS[yypt-0].item.(string)}
		}
	case 2:
		{
			log.Infof("Assertion1 empty found!")
			yyVAL.item = ""
		}
	case 3:
		{
			log.Infof("Assertion1 found!")
			var buffer bytes.Buffer
			buffer.WriteString(yyS[yypt-1].item.(string))
			buffer.WriteString(yyS[yypt-0].item.(string))
			yyVAL.item = buffer.String()
		}
	case 4:
		{
			log.Infof("Assertion2 empty found!")
			yyVAL.item = ""
		}
	case 5:
		{
			log.Infof("Assertion2 found!")
			var buffer bytes.Buffer
			buffer.WriteString(yyS[yypt-1].item.(string))
			buffer.WriteString(yyS[yypt-0].item.(string))
			yyVAL.item = buffer.String()
		}
	case 6:
		{
			log.Infof("Assertion3 empty found!")
			yyVAL.item = ""
		}
	case 7:
		{
			log.Infof("Assertion3 found!")
			var buffer bytes.Buffer
			buffer.WriteString(yyS[yypt-1].item.(string))
			buffer.WriteString(yyS[yypt-0].item.(string))
			yyVAL.item = buffer.String()
		}
	case 8:
		{
			log.Infof("Assertion4 empty found!")
			yyVAL.item = ""
		}
	case 9:
		{
			log.Infof("Assertion4 found!")
			yyVAL.item = yyS[yypt-0].item
		}
	case 10:
		{
			log.Infof("Number_param found!")
			var buffer bytes.Buffer
			if yyS[yypt-2].item != nil {
				buffer.WriteString(yyS[yypt-2].item.(string))
			}

			buffer.WriteString(strconv.Itoa(yyS[yypt-1].item.(int)))

			if yyS[yypt-0].item != nil {
				buffer.WriteString(yyS[yypt-0].item.(string))
			}

			yyVAL.item = buffer.String()
		}
	case 11:
		{
			log.Infof("Number_param1 empty found!")
			yyVAL.item = ""
		}
	case 12:
		{
			log.Infof("Number_param1 found!")
			yyVAL.item = yyS[yypt-0].item
		}
	case 13:
		{
			log.Infof("Number_param2 empty found!")
			yyVAL.item = ""
		}
	case 14:
		{
			log.Infof("Number_param2 found!")
			var buffer bytes.Buffer
			buffer.WriteString(".")
			buffer.WriteString(yyS[yypt-0].item.(string))
			yyVAL.item = buffer.String()
		}
	case 15:
		{
			log.Infof("Object found!")
			yyVAL.item = Object{ObjectType: yyS[yypt-1].item.(string), ObjectId: yyS[yypt-0].item.(string)}
		}
	case 16:
		{
			log.Infof("Text param found!")
			yyVAL.item = yyS[yypt-0].item
		}
	case 17:
		{
			log.Infof("Number Param found!")
			yyVAL.item = yyS[yypt-0].item
		}
	case 18:
		{
			log.Infof("Start")
			if v, ok := Test_Scenariolex.(*BddTestLex); ok {
				v.OnBddTest(yyS[yypt-0].item)
			}
		}
	case 19:
		{
			yyVAL.item = append([]Assertion{yyS[yypt-1].item.(Assertion)}, yyS[yypt-0].item.([]Assertion)...)
		}
	case 20:
		{
			yyVAL.item = []Assertion(nil)
		}
	case 21:
		{
			yyVAL.item = append(yyS[yypt-1].item.([]Assertion), yyS[yypt-0].item.(Assertion))
		}
	case 22:
		{
			//fmt.Println("Test_Line new line found!")
		}
	case 23:
		{
			yyVAL.item = yyS[yypt-0].item.(Assertion)
		}

	}

	if yyEx != nil && yyEx.Reduced(r, exState, &yyVAL) {
		return -1
	}
	goto yystack /* stack new state and value */
}

type (
	Assertion struct {
		FullText   string
		Label      string
		Action     string
		ObjectType string
		ObjectId   string
		Param      string
	}
	Assertion1    string
	Assertion2    string
	Assertion3    string
	Assertion4    string
	Number_param  string
	Number_param1 string
	Number_param2 string
	Object        struct {
		ObjectType string
		ObjectId   string
	}
	Param          string
	Start          interface{}
	Test_Scenario  []Assertion
	Test_Scenario1 []Assertion
	Test_line      Assertion
)
