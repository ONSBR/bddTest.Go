%{

//TODO Put your favorite license here
		
// yacc source generated by ebnf2y[1]
// at 2016-05-04 11:47:01.771562225 -0300 BRT
//
//  $ ebnf2y -pkg lexer -start Feature bddLang.ebnf
//
// CAUTION: If this file is a Go source file (*.go), it was generated
// automatically by '$ go tool yacc' from a *.y file - DO NOT EDIT in that case!
// 
//   [1]: http://github.com/cznic/ebnf2y

package lexer

import (
	"bytes"
	//"fmt"
	"strconv"
	"github.com/ONSBR/bddTest.Go/util"
)

var log = util.GetLogger("lexer.lexer") 

%}

%union {
	item interface{} //TODO insert real field(s)
}

%token	ACTION
%token	EXPECT_ACTION_ACTION
%token	EXPECT_ACTION_LABEL
%token	FEATURE_LABEL
%token	INIT_SCENARIO_LABEL
%token	LABEL
%token	NEW_LINE
%token	NUMBER
%token	OBJECT_TYPE
%token	PAGE_LABEL
%token	SCENARIO_LABEL
%token	SIGN
%token	TEXT
%token	TEXT_PARAM
%token	USER_SCENARIO_LABEL

%type	<item> 	/*TODO real type(s), if/where applicable */
	ACTION
	EXPECT_ACTION_ACTION
	EXPECT_ACTION_LABEL
	FEATURE_LABEL
	INIT_SCENARIO_LABEL
	LABEL
	NEW_LINE
	NUMBER
	OBJECT_TYPE
	PAGE_LABEL
	SCENARIO_LABEL
	SIGN
	TEXT
	TEXT_PARAM
	USER_SCENARIO_LABEL

%type	<item> 	/*TODO real type(s), if/where applicable */
	Expect_action
	Expect_action1
	Expect_action2
	Expect_action3
	Expect_action4
	Expect_expression
	Expect_expression1
	Expect_expression2
	Expect_expression3
	Expect_expression4
	Feature
	Feature1
	Feature_block
	Feature_block1
	Init_scenario
	Init_scenario1
	Number_param
	Number_param1
	Number_param2
	Object
	Page_line
	Param
	Scenario
	Scenario1
	Scenario_line
	Start
	Test_block
	Test_block1
	Test_block2
	Test_expect_line
	Test_expect_line1
	Test_init_scenario_line
	Test_line
	Text_line
	Text_line1
	Text_line11

%start Start

%%

Expect_action:
	LABEL Expect_action1 ACTION Expect_action2 Object Expect_action3 Expect_action4
	{
		log.Infof("Expect_action found! |%s|",$1.(string))
		var buffer bytes.Buffer
		buffer.WriteString($1.(string))
		buffer.WriteString(" ")
		buffer.WriteString($2.(string))
		buffer.WriteString(" ")
		buffer.WriteString($3.(string))
		buffer.WriteString(" ")
		buffer.WriteString($4.(string))
		buffer.WriteString(" ")
		buffer.WriteString($5.(Object).ObjectType)
		buffer.WriteString(" ")
		buffer.WriteString($5.(Object).ObjectId)
		buffer.WriteString(" ")
		buffer.WriteString($6.(string))
		buffer.WriteString(" \"")
		buffer.WriteString($7.(string))
		buffer.WriteString("\"")		
		$$ = Expect_action{FullText:buffer.String(),Label:$1.(string),Action:$3.(string),ObjectType:$5.(Object).ObjectType,ObjectId:$5.(Object).ObjectId,Param:$7.(string)}
	}

Expect_action1:
	/* EMPTY */
	{
		log.Infof("Expect_action1 empty found!")
		$$ = ""
	}
|	Expect_action1 TEXT
	{
		log.Infof("Expect_action1 found!")
		var buffer bytes.Buffer
		buffer.WriteString($1.(string))
		if len($1.(string)) > 0 {
			buffer.WriteString(" ")
		}
		buffer.WriteString($2.(string))
		$$ = buffer.String()
	}

Expect_action2:
	/* EMPTY */
	{
		log.Infof("Expect_action2 empty found!")
		$$ = ""
	}
|	Expect_action2 TEXT
	{
		log.Infof("Expect_action2 found!")
		var buffer bytes.Buffer
		buffer.WriteString($1.(string))
		if len($1.(string)) > 0 {
			buffer.WriteString(" ")
		}
		buffer.WriteString($2.(string))
		$$ = buffer.String()
	}

Expect_action3:
	/* EMPTY */
	{
		log.Infof("Expect_action3 empty found!")
		$$ = ""
	}
|	Expect_action3 TEXT
	{
		log.Infof("Expect_action3 found!")
		var buffer bytes.Buffer
		buffer.WriteString($1.(string))
		if len($1.(string)) > 0 {
			buffer.WriteString(" ")
		}
		buffer.WriteString($2.(string))
		$$ = buffer.String()
	}

Expect_action4:
	/* EMPTY */
	{
		log.Infof("Expect_action4 empty found!")
		$$ = ""
	}
|	Param
	{
		log.Infof("Expect_action4 found!")
		$$ = $1
	}

Expect_expression:
	EXPECT_ACTION_LABEL Expect_expression1 EXPECT_ACTION_ACTION Expect_expression2 Object Expect_expression3 Expect_expression4
	{
		log.Infof("Expect_expression found!")
		var buffer bytes.Buffer
		buffer.WriteString($1.(string))
		buffer.WriteString(" ")
		buffer.WriteString($2.(string))
		buffer.WriteString(" ")
		buffer.WriteString($3.(string))
		buffer.WriteString(" ")
		buffer.WriteString($4.(string))
		buffer.WriteString(" ")
		buffer.WriteString($5.(Object).ObjectType)
		buffer.WriteString(" ")
		buffer.WriteString($5.(Object).ObjectId)
		buffer.WriteString(" ")
		buffer.WriteString($6.(string))
		buffer.WriteString(" \"")
		buffer.WriteString($7.(string))
		buffer.WriteString("\"")
		$$ = Expect_expression{FullText:buffer.String(),Label:$1.(string),Action:$3.(string),ObjectType:$5.(Object).ObjectType,ObjectId:$5.(Object).ObjectId,Param:$7.(string)}
	}

Expect_expression1:
	/* EMPTY */
	{
		log.Infof("Expect_expression1 empty found!")
		$$ = ""
	}
|	Expect_expression1 TEXT
	{
		log.Infof("Expect_expression1 found!")
		var buffer bytes.Buffer
		buffer.WriteString($1.(string))
		if len($1.(string)) > 0 {
			buffer.WriteString(" ")
		}
		buffer.WriteString($2.(string))
		$$ = buffer.String()
	}

Expect_expression2:
	/* EMPTY */
	{
		log.Infof("Expect_expression2 empty found!")
		$$ = ""
	}
|	Expect_expression2 TEXT
	{
		log.Infof("Expect_expression2 found!")
		var buffer bytes.Buffer
		buffer.WriteString($1.(string))
		if len($1.(string)) > 0 {
			buffer.WriteString(" ")
		}
		buffer.WriteString($2.(string))
		$$ = buffer.String()
	}

Expect_expression3:
	/* EMPTY */
	{
		log.Infof("Expect_expression3 empty found!")
		$$ = ""
	}
|	Expect_expression3 TEXT
	{
		log.Infof("Expect_expression3 found!")
		var buffer bytes.Buffer
		buffer.WriteString($1.(string))
		if len($1.(string)) > 0 {
			buffer.WriteString(" ")
		}
		buffer.WriteString($2.(string))
		$$ = buffer.String()
	}

Expect_expression4:
	/* EMPTY */
	{
		log.Infof("Expect_expression4 empty found!")
		$$ = ""
	}
|	Param
	{
		log.Infof("Expect_expression4 found!")
		$$ = $1
	}

Feature:
	Feature_block Page_line Feature1
	{
		log.Infof("Feature found! |%s|", $1.(Feature_block).Label)
		featureBlock := $1.(Feature_block)
		page := $2.(string)
		feature := Feature{LineNum:featureBlock.LineNum, FullText:featureBlock.FullText, Name:featureBlock.Name, Label:featureBlock.Label, Scenarios:$3.([]Scenario), PageName: page}
		$$ = feature 
	}

Feature1:
	/* EMPTY */
	{
		$$ = []Scenario(nil)
	}
|	Feature1 Scenario
	{
		log.Infof("Feature1 found!")
		if nil != $2 {
			$$ = append($1.([]Scenario),$2.(Scenario))
		} else {
			$$ = $1.([]Scenario)
		}
	}

Feature_block:
	FEATURE_LABEL Feature_block1
	{
		log.Infof("Feature_block found! %s",$1.(string))
		
		var buffer bytes.Buffer
		buffer.WriteString($1.(string))
		buffer.WriteString(": ")
		buffer.WriteString($2.(string))
		featureBlock := Feature_block{LineNum:1, FullText:buffer.String(), Label:$1.(string), Name: $2.(string)}
		$$ = featureBlock
	}

Feature_block1:
	/* EMPTY */
	{
		$$ = ""
	}
|	Feature_block1 Text_line
	{
		log.Infof("Feature_block1 found!")
		var buffer bytes.Buffer
		buffer.WriteString($1.(string))
		if len($1.(string)) > 0 {
			buffer.WriteString("\n")
		}
		buffer.WriteString($2.(string))
		$$ = buffer.String()
	}

Init_scenario:
	INIT_SCENARIO_LABEL Init_scenario1 USER_SCENARIO_LABEL TEXT
	{
		log.Infof("Init_scenario found!")
		$$ = $4.(string)
	}

Init_scenario1:
	/* EMPTY */
	{
		log.Infof("Init_scenario1 empty found!")
		$$ = ""
	}
|	Init_scenario1 TEXT
	{
		log.Infof("Init_scenario1 found!")
		var buffer bytes.Buffer
		buffer.WriteString($1.(string))
		if len($1.(string)) > 0 {
			buffer.WriteString(" ")
		}
		buffer.WriteString($2.(string))
		$$ = buffer.String()
	}

Number_param:
	Number_param1 NUMBER Number_param2
	{
		log.Infof("Number_param found!")
		var buffer bytes.Buffer
		if $1 != nil {
			buffer.WriteString($1.(string))
		}
		
		buffer.WriteString(strconv.Itoa($2.(int)))
		
		if $3 != nil {
			buffer.WriteString($3.(string))
		}
		
		$$ = buffer.String()
	}

Number_param1:
	/* EMPTY */
	{
		log.Infof("Number_param1 empty found!")
		$$ = ""
	}
|	SIGN
	{
		log.Infof("Number_param1 found!")
		$$ = $1
	}

Number_param2:
	/* EMPTY */
	{
		log.Infof("Number_param2 empty found!")
		$$ = ""
	}
|	'.' NUMBER
	{
		log.Infof("Number_param2 found!")
		var buffer bytes.Buffer
		buffer.WriteString(".")
		buffer.WriteString(strconv.Itoa($2.(int)))
		$$ = buffer.String()
	}

Object:
	OBJECT_TYPE TEXT
	{
		log.Infof("Object found!")
		$$ = Object{ObjectType:$1.(string), ObjectId:$2.(string)}
	}

Page_line:
	PAGE_LABEL Text_line
	{
		log.Infof("Page_line found!")
		
		$$ = $2.(string)
	}

Param:
	TEXT_PARAM
	{
		log.Infof("Text param found!")
		$$ = $1
	}
|	Number_param
	{
		log.Infof("Number Param found!")
		$$ = $1
	}

Scenario:
	Scenario_line Scenario1
	{
		log.Infof("Scenario found!")
		line := $1.(Scenario_line)
		testBlock := $2.(Test_block)
		scenario := Scenario{LineNum:line.LineNum,
			FullText:line.FullText,
			Label:line.Label,
			Name:line.Name,
			Actions:testBlock.Actions, 
			Expectations:testBlock.Expectations,
			Username:testBlock.Username}
		$$ = scenario
	}

Scenario1:
	/* EMPTY */
	{
		$$ = Test_block{}
	}
|	Test_block
	{
		log.Infof("Scenario1 found!")
		$$ = $1
	}

Scenario_line:
	SCENARIO_LABEL Text_line
	{
		log.Infof("Scenario_line found!")
		var buffer bytes.Buffer
		buffer.WriteString($1.(string))
		buffer.WriteString(": ")
		buffer.WriteString($2.(string))
		lineNum := 0
		if v,ok := Featurelex.(*BddTestLex); ok {
			lineNum = v.lineNum
		}
		line := Scenario_line{LineNum:lineNum,FullText:buffer.String(),Label:$1.(string),Name:$2.(string)}
		$$ = line
	}

Start:
	Feature
	{
		log.Infof("Start,|%s|",$1.(Feature).Label)
		//if v,ok := Featurelex.(*BddTestLex); ok {
		//	v.OnBddTest($1)
		//}
		parsedCode = $1.(Feature)
	}

Test_block:
	Test_init_scenario_line Test_line Test_block1 Test_expect_line Test_block2
	{
		log.Infof("Test_block")
		
		action := $2.(Expect_action)
		actions := append([]Expect_action{action}, $3.([]Expect_action)...)
		
		expectation := $4.(Expect_expression)
		expectations := append([]Expect_expression{expectation}, $5.([]Expect_expression)...)
		
		$$ = Test_block{Username:$1.(string),Actions:actions,Expectations:expectations}
	}

Test_block1:
	/* EMPTY */
	{
		$$ = []Expect_action(nil)
	}
|	Test_block1 Test_line
	{
		log.Infof("Test_block1")
		if nil != $2 {
			lineNum := 0
			if v,ok := Featurelex.(*BddTestLex); ok {
				lineNum = v.lineNum
			}
			action := $2.(Expect_action)
			action.LineNum = lineNum
			log.Infof("Line Num %d", action.LineNum)
			$$ = append($1.([]Expect_action),action)
		} else {
			$$ = $1.([]Expect_action)
		}
	}

Test_block2:
	/* EMPTY */
	{
		$$ = []Expect_expression(nil)
	}
|	Test_block2 Test_expect_line
	{
		log.Infof("Test_block2")
		if nil != $2 {
			lineNum := 0
			if v,ok := Featurelex.(*BddTestLex); ok {
				lineNum = v.lineNum
			}
			expectation := $2.(Expect_expression)
			expectation.LineNum = lineNum
			$$ = append($1.([]Expect_expression),expectation)
		} else {
			$$ = $1.([]Expect_expression)
		}
	}

Test_expect_line:
	Expect_expression Test_expect_line1
	{
		log.Infof("Test_expect_line")
		
		expectation := $1.(Expect_expression)
		
		lineNum := 0
		if v,ok := Featurelex.(*BddTestLex); ok {
			lineNum = v.lineNum
		}
		expectation.LineNum = lineNum
		$$ = expectation
	}

Test_expect_line1:
	/* EMPTY */
	{
		$$ = nil
	}
|	NEW_LINE
	{
		log.Infof("New line")
		$$ = nil
	}

Test_init_scenario_line:
	Init_scenario NEW_LINE
	{
		log.Infof("Test_init_scenario_line found!")
		$$ = $1.(string)
	}

Test_line:
	Expect_action NEW_LINE
	{
		log.Infof("Test_line")
		action := $1.(Expect_action)
		lineNum := 0
		if v,ok := Featurelex.(*BddTestLex); ok {
			lineNum = v.lineNum
		}
		action.LineNum = lineNum
		$$ = action
	}

Text_line:
    Text_line1 NEW_LINE
    {
        log.Infof("Text_line found")
		var buffer bytes.Buffer
		buffer.WriteString($1.(string))
		//buffer.WriteString("\n")
		$$ = buffer.String()
    }

Text_line1:
    /* EMPTY */
    {
        $$ = ""
    }
|   Text_line1 Text_line11
    {
        log.Infof("Text_line1 found")
		
		var buffer bytes.Buffer
		buffer.WriteString($1.(string))
		if len($1.(string)) > 0 {
			buffer.WriteString(" ")
		}
		buffer.WriteString($2.(string))
		
		$$ = buffer.String()
    }

Text_line11:
    TEXT
    {
        $$ = $1
    }
|   NUMBER
    {
        $$ = strconv.Itoa($1.(int))
    }

%%

type (
	Expect_action struct {
		LineNum int
		FullText string
		Label string
		Action string
		ObjectType string
		ObjectId string
		Param string
	}
	Expect_action1 string
	Expect_action2 string
	Expect_action3 string
	Expect_action4 string
	Expect_expression struct {
		LineNum int
		FullText string
		Label string
		Action string
		ObjectType string
		ObjectId string
		Param string
	}
	Expect_expression1 string
	Expect_expression2 string
	Expect_expression3 string
	Expect_expression4 string
	Feature struct {
		LineNum int
		FullText string
		Label string
		Name string
		PageName string
		Scenarios []Scenario
	}
	Feature1 []Scenario
	Feature_block struct {
		LineNum int
		FullText string
		Label string
		Name string
	}
	Feature_block1 string
	Init_scenario string
	Init_scenario1 string
	Number_param string
	Number_param1 string
	Number_param2 string
	Object struct {
		ObjectType string
		ObjectId string
	}
	Page_line string
	Param string
	Scenario struct {
		LineNum int
		FullText string
		Label string
		Name string
		Username string
		Actions []Expect_action
		Expectations []Expect_expression
	}
	Scenario1 Test_block
	Scenario_line struct {
		FullText string
		Label string
		Name string
		LineNum int
	}
	Start interface{}
	Test_block struct {
		Username string
		Actions []Expect_action
		Expectations []Expect_expression
	}
	Test_block1 []Expect_action
	Test_block2 []Expect_expression
	Test_expect_line Expect_expression
	Test_expect_line1 interface{}
	Test_init_scenario_line string
	Test_line Expect_action
	Text_line string
	Text_line1 string
	Text_line11 string
)
	
var parsedCode Feature

func GetParsedCode() interface{} {
	log.Infof("GetParsedCode |%s|",parsedCode.Label)
	return parsedCode
}