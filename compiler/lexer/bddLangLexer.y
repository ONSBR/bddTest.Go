%{

//TODO Put your favorite license here
		
// yacc source generated by ebnf2y[1]
// at 2016-05-03 14:19:12.727122628 -0300 BRT
//
//  $ ebnf2y -pkg lexer -start Feature bddLang.ebnf
//
// CAUTION: If this file is a Go source file (*.go), it was generated
// automatically by '$ go tool yacc' from a *.y file - DO NOT EDIT in that case!
// 
//   [1]: http://github.com/cznic/ebnf2y

package lexer

import (
	"bytes"
	//"fmt"
	"strconv"
	"github.com/ONSBR/bddTest.Go/util"
)

var log = util.GetLogger("lexer.lexer") 

%}

%union {
	item interface{} //TODO insert real field(s)
}

%token	ACTION
%token	FEATURE_LABEL
%token	LABEL
%token	NEW_LINE
%token	NUMBER
%token	OBJECT_TYPE
%token	SCENARIO_LABEL
%token	SIGN
%token	TEXT
%token	TEXT_PARAM

%type	<item> 	/*TODO real type(s), if/where applicable */
	ACTION
	FEATURE_LABEL
	LABEL
	NEW_LINE
	NUMBER
	OBJECT_TYPE
	SCENARIO_LABEL
	SIGN
	TEXT
	TEXT_PARAM

%type	<item> 	/*TODO real type(s), if/where applicable */
	Assertion
	Assertion1
	Assertion2
	Assertion3
	Assertion4
	Feature
	Feature1
	Feature_block
	Feature_block1
	Number_param
	Number_param1
	Number_param2
	Object
	Param
	Scenario
	Scenario1
	Scenario_line
	Start
	Test_block
	Test_block1
	Test_line
	Test_line1
	Text_line
	Text_line1


%start Start

%%

Assertion:
	LABEL Assertion1 ACTION Assertion2 Object Assertion3 Assertion4
	{
		log.Infof("Assertion found!")
		var buffer bytes.Buffer
		buffer.WriteString($1.(string))
		buffer.WriteString(" ")
		buffer.WriteString($2.(string))
		buffer.WriteString(" ")
		buffer.WriteString($3.(string))
		buffer.WriteString(" ")
		buffer.WriteString($4.(string))
		buffer.WriteString(" ")
		buffer.WriteString($5.(Object).ObjectType)
		buffer.WriteString(" ")
		buffer.WriteString($5.(Object).ObjectId)
		buffer.WriteString(" ")
		buffer.WriteString($6.(string))
		buffer.WriteString(" ")
		buffer.WriteString($7.(string))
		$$ = Assertion{FullText:buffer.String(),Label:$1.(string),Action:$3.(string),ObjectType:$5.(Object).ObjectType,ObjectId:$5.(Object).ObjectId,Param:$7.(string)}
	}

Assertion1:
	/* EMPTY */
	{
		log.Infof("Assertion1 empty found!")
		$$ = ""
	}
|	Assertion1 TEXT
	{
		log.Infof("Assertion1 found!")
		var buffer bytes.Buffer
		buffer.WriteString($1.(string))
		if len($1.(string)) > 0 {
			buffer.WriteString(" ")
		}
		buffer.WriteString($2.(string))
		$$ = buffer.String()
	}

Assertion2:
	/* EMPTY */
	{
		log.Infof("Assertion2 empty found!")
		$$ = ""
	}
|	Assertion2 TEXT
	{
		log.Infof("Assertion2 found!")
		var buffer bytes.Buffer
		buffer.WriteString($1.(string))
		if len($1.(string)) > 0 {
			buffer.WriteString(" ")
		}
		buffer.WriteString($2.(string))
		$$ = buffer.String()
	}

Assertion3:
	/* EMPTY */
	{
		log.Infof("Assertion3 empty found!")
		$$ = ""
	}
|	Assertion3 TEXT
	{
		log.Infof("Assertion3 found!")
		var buffer bytes.Buffer
		buffer.WriteString($1.(string))
		if len($1.(string)) > 0 {
			buffer.WriteString(" ")
		}
		buffer.WriteString($2.(string))
		$$ = buffer.String()
	}

Assertion4:
	/* EMPTY */
	{
		log.Infof("Assertion4 empty found!")
		$$ = ""
	}
|	Param
	{
		log.Infof("Assertion4 found!")
		$$ = $1
	}

Feature:
	Feature_block Feature1
	{
		log.Infof("Feature found!")
		featureBlock := $1.(Feature_block)
		feature := Feature{LineNum:featureBlock.LineNum, FullText:featureBlock.FullText, Name:featureBlock.Name, Label:featureBlock.Label, Scenarios:$2.([]Scenario)}
		$$ = feature 
	}

Feature1:
	/* EMPTY */
	{
		$$ = []Scenario(nil)
	}
|	Feature1 Scenario
	{
		log.Infof("Feature1 found!")
		if nil != $2 {
			$$ = append($1.([]Scenario),$2.(Scenario))
		} else {
			$$ = $1.([]Scenario)
		}
	}

Feature_block:
	FEATURE_LABEL Feature_block1
	{
		log.Infof("Feature_block found!")
		
		lineNum := 0
		if v,ok := Featurelex.(*BddTestLex); ok {
			lineNum = v.lineNum
		}
		
		var buffer bytes.Buffer
		buffer.WriteString($1.(string))
		buffer.WriteString(" ")
		buffer.WriteString($2.(string))
		featureBlock := Feature_block{LineNum:lineNum, FullText:buffer.String(), Label:$1.(string), Name: $2.(string)}
		$$ = featureBlock
	}

Feature_block1:
	/* EMPTY */
	{
		$$ = ""
	}
|	Feature_block1 Text_line
	{
		log.Infof("Feature_block1 found!")
		var buffer bytes.Buffer
		buffer.WriteString($1.(string))
		if len($1.(string)) > 0 {
			buffer.WriteString("\n")
		}
		buffer.WriteString($2.(string))
		$$ = buffer.String()
	}

Number_param:
	Number_param1 NUMBER Number_param2
	{
		log.Infof("Number_param found!")
		var buffer bytes.Buffer
		if $1 != nil {
			buffer.WriteString($1.(string))
		}
		
		buffer.WriteString(strconv.Itoa($2.(int)))
		
		if $3 != nil {
			buffer.WriteString($3.(string))
		}
		
		$$ = buffer.String()
	}

Number_param1:
	/* EMPTY */
	{
		log.Infof("Number_param1 empty found!")
		$$ = ""
	}
|	SIGN
	{
		log.Infof("Number_param1 found!")
		$$ = $1
	}

Number_param2:
	/* EMPTY */
	{
		log.Infof("Number_param2 empty found!")
		$$ = ""
	}
|	'.' NUMBER
	{
		log.Infof("Number_param2 found!")
		var buffer bytes.Buffer
		buffer.WriteString(".")
		buffer.WriteString($2.(string))
		$$ = buffer.String()
	}

Object:
	OBJECT_TYPE TEXT
	{
		log.Infof("Object found!")
		$$ = Object{ObjectType:$1.(string), ObjectId:$2.(string)}
	}

Param:
	TEXT_PARAM
	{
		log.Infof("Text param found!")
		$$ = $1
	}
|	Number_param
	{
		log.Infof("Number Param found!")
		$$ = $1
	}

Scenario:
	Scenario_line Scenario1
	{
		log.Infof("Scenario found!")
		lineNum := 0
		if v,ok := Featurelex.(*BddTestLex); ok {
			lineNum = v.lineNum
		}
		line := $1.(Scenario_line)
		scenario := Scenario{LineNum:lineNum,FullText:line.FullText,Label:line.Label,Name:line.Name,Assertions:$2.([]Assertion)}
		$$ = scenario
	}

Scenario1:
	/* EMPTY */
	{
		$$ = []Assertion(nil)
	}
|	Test_block
	{
		log.Infof("Scenario1 found!")
		$$ = $1
	}

Scenario_line:
	SCENARIO_LABEL Text_line
	{
		log.Infof("Scenario_line found!")
		var buffer bytes.Buffer
		buffer.WriteString($1.(string))
		buffer.WriteString(" ")
		buffer.WriteString($2.(string))
		line := Scenario_line{FullText:buffer.String(),Label:$1.(string),Name:$2.(string)}
		$$ = line
	}

Start:
	Feature
	{
		log.Infof("Start")
		//if v,ok := Featurelex.(*BddTestLex); ok {
		//	v.OnBddTest($1)
		//}
		parsedCode = $1.(Feature)
	}

Test_block:
	Test_line Test_block1
	{
		log.Infof("Test_block")
		lineNum := 0
		if v,ok := Featurelex.(*BddTestLex); ok {
			lineNum = v.lineNum
		}
		assertion := $1.(Assertion)
		assertion.LineNum = lineNum
		log.Infof("Line Num %d", assertion.LineNum)
		$$ = append([]Assertion{assertion}, $2.([]Assertion)...)
	}

Test_block1:
	/* EMPTY */
	{
		$$ = []Assertion(nil)
	}
|	Test_block1 Test_line
	{
		log.Infof("Test_block1")
		if nil != $2 {
			lineNum := 0
			if v,ok := Featurelex.(*BddTestLex); ok {
				lineNum = v.lineNum
			}
			assertion := $2.(Assertion)
			assertion.LineNum = lineNum
			log.Infof("Line Num %d", assertion.LineNum)
			$$ = append($1.([]Assertion),assertion)
		} else {
			$$ = $1.([]Assertion)
		}
	}

Test_line:
	Assertion Test_line1
	{
		log.Infof("Test_line")
		$$ = $1.(Assertion)
	}

Test_line1:
	/* EMPTY */
	{
		$$ = nil 
	}
|	NEW_LINE
	{
		log.Infof("New line")
		$$ = nil
	}

Text_line:
	Text_line1 NEW_LINE
	{
		log.Infof("Text_line found")
		var buffer bytes.Buffer
		buffer.WriteString($1.(string))
		//buffer.WriteString("\n")
		$$ = buffer.String()
	}

Text_line1:
	/* EMPTY */
	{
		$$ = ""
	}
|	Text_line1 TEXT
	{
		log.Infof("Text_line1 found")
		
		var buffer bytes.Buffer
		buffer.WriteString($1.(string))
		if len($1.(string)) > 0 {
			buffer.WriteString(" ")
		}
		buffer.WriteString($2.(string))
		
		$$ = buffer.String()
	}

%%

type (
	Assertion struct {
		LineNum int
		FullText string
		Label string
		Action string
		ObjectType string
		ObjectId string
		Param string
	}
	Assertion1 string
	Assertion2 string
	Assertion3 string
	Assertion4 string
	Feature struct {
		LineNum int
		FullText string
		Label string
		Name string
		Scenarios []Scenario
	}
	Feature1 []Scenario
	Feature_block struct {
		LineNum int
		FullText string
		Label string
		Name string
	}
	Feature_block1 string
	Number_param string
	Number_param1 string
	Number_param2 string
	Object struct {
		ObjectType string
		ObjectId string
	}
	Param string
	Scenario struct {
		LineNum int
		FullText string
		Label string
		Name string
		Assertions []Assertion
	}
	Scenario1 []Assertion
	Scenario_line struct {
		FullText string
		Label string
		Name string
	}
	Start interface{}
	Test_block []Assertion
	Test_block1 []Assertion
	Test_line Assertion
	Test_line1 interface{}
	Text_line string
	Text_line1 string
)

var parsedCode Feature

func GetParsedCode() interface{} {
	return parsedCode
}